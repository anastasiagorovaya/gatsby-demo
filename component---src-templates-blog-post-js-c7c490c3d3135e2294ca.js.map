{"version":3,"sources":["webpack:///./src/templates/blogPost.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["query","Template","data","pageContext","markdownRemark","title","frontmatter","html","next","prev","style","fontFamily","className","dangerouslySetInnerHTML","__html","marginBottom","to","path","m","module","exports","require","default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","render","finalData","Fragment","StaticQuery","props","children","Consumer","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"0FACA,0EA0BaA,EAAK,WAUHC,UAjCE,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YACdC,EAAkBF,EAAlBE,eACDC,EAAQD,EAAeE,YAAYD,MACnCE,EAAOH,EAAeG,KACrBC,EAAcL,EAAdK,KAAMC,EAAQN,EAARM,KACb,OACI,6BACI,wBAAIC,MAAO,CAACC,WAAY,WAAxB,IAAqCN,GACrC,yBAAKO,UAAU,WACXC,wBAA2B,CAACC,OAAQP,KACxC,yBAAKG,MAAO,CAACK,aAAc,OAAQJ,WAAY,WAC1CH,GACG,kBAAC,IAAD,CAAMQ,GAAIR,EAAKF,YAAYW,MAA3B,SAGR,yBAAKP,MAAO,CAACC,WAAY,WACpBF,GACG,kBAAC,IAAD,CAAMO,GAAIP,EAAKH,YAAYW,MAA3B,Y,oBCrBpB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,uHAcyBK,QAAOC,QAdhC,IAgBMC,EAAqBC,IAAMC,cAAc,IAE/C,SAASC,EAAT,GAA4E,IAAzCC,EAAwC,EAAxCA,gBAAiB3B,EAAuB,EAAvBA,KAAMF,EAAiB,EAAjBA,MAAO8B,EAAU,EAAVA,OACzDC,EAAY7B,EACdA,EAAKA,KACL2B,EAAgB7B,IAAU6B,EAAgB7B,GAAOE,KAErD,OACE,kBAAC,IAAM8B,SAAP,KACGD,GAAaD,EAAOC,IACnBA,GAAa,uDAKrB,IAAME,EAAc,SAAAC,GAAU,IACpBhC,EAAkCgC,EAAlChC,KAAMF,EAA4BkC,EAA5BlC,MAAO8B,EAAqBI,EAArBJ,OAAQK,EAAaD,EAAbC,SAE7B,OACE,kBAACV,EAAmBW,SAApB,MACG,SAAAP,GAAe,OACd,kBAACD,EAAD,CACE1B,KAAMA,EACNF,MAAOA,EACP8B,OAAQA,GAAUK,EAClBN,gBAAiBA,S,0ECnBZQ,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEb,IAAMc,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-blog-post-js-c7c490c3d3135e2294ca.js","sourcesContent":["\nimport React from 'react';\nimport {Link, graphql} from 'gatsby';\n\nconst Template = ({data, pageContext}) => {\n    const {markdownRemark} = data;\n    const title = markdownRemark.frontmatter.title;\n    const html = markdownRemark.html;\n    const {next, prev} = pageContext;\n    return (\n        <div>\n            <h1 style={{fontFamily: 'avenir'}}> {title}</h1>\n            <div className='blogpost'\n                dangerouslySetInnerHTML = {{__html: html}}/>\n            <div style={{marginBottom: '1rem', fontFamily: 'avenir'}}>\n                {next && \n                    <Link to={next.frontmatter.path}>Next</Link>\n                }\n            </div>\n            <div style={{fontFamily: 'avenir'}}>\n                {prev && \n                    <Link to={prev.frontmatter.path}>Prev</Link>\n                }\n            </div>\n        </div>\n    )\n}\nexport const query = graphql`\n    query($pathSlug: String!) {\n       markdownRemark(frontmatter: {path: {eq: $pathSlug}}) {\n          html\n          frontmatter {\n              title\n          } \n       }\n    }\n`\nexport default Template;\n\n\n\n// import React from 'react';\n// import {graphql} from 'gatsby';\n\n// const Template = ({data}) => {\n//     const {markdownRemark} = data;\n//     const title = markdownRemark.frontmatter.title\n//     const html = markdownRemark.frontmatter.html\n//     return (\n//         <div>\n//             <h1 style={{fontFamily: 'avenir'}}> {title}</h1>\n//             <div className='blogpost'\n//                 dangerouslySetInnerHTML = {{__html: html}}>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export const query = graphql `\n//     query($pathSlug: String!) {\n//         markdownRemark(frontmatter: {path: {eq: $pathSlug}}){\n//             html\n//             frontmatter {\n//                 title\n//             }\n//         }\n//     }\n// `\n\n// export default Template;","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}